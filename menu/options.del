import "../main.del";

playervar Boolean showAllEnabled;
playervar Boolean showStatsEnabled;
playervar Boolean showStreakEnabled;
playervar Boolean healEnabled;
playervar Any healAmt;
playervar Any healDur;
playervar Boolean randomHeroEnabled;

playervar Number language;
playervar String langProgStr;
playervar Boolean langSwap;

playervar Number[] itemWidth;

void ToggleAllHud() playervar "Menu Option Sub : Toggle All HUD"
{
    showAllEnabled = showStatsEnabled && showStreakEnabled ? !showAllEnabled : true;

    if (showAllEnabled)
    {
        showStatsEnabled = true;
        showStreakEnabled = true;

        SmallMessage(player, <"   <0>  <1>", IconString(Icon.Checkmark), local.showWorkshopHudNotifStr>);
    }
    else 
    {
        showStatsEnabled = false;
        showStreakEnabled = false;

        SmallMessage(player, <"   <0>  <1>", IconString(Icon.No), local.hideWorkshopHudNotifStr>);
    }
}

void ToggleStats() playervar "Menu Option Sub : Toggle Stats"
{
    showStatsEnabled = !showStatsEnabled;
    if (showStatsEnabled)
    {
        if (showStreakEnabled)
            showAllEnabled = true;

        SmallMessage(player, <"   <0>  <1>", IconString(Icon.Checkmark), local.showStatsNotifStr>);
    }
    else
    {
        if (!showStreakEnabled)
            showAllEnabled = false;

        SmallMessage(player, <"   <0>  <1>", IconString(Icon.No), local.hideStatsNotifStr>);
    }
}

void ToggleStreak() playervar "Menu Option Sub : Toggle Streak"
{
    showStreakEnabled = !showStreakEnabled;
    if (showStreakEnabled)
    {
        if (showStatsEnabled)
            showAllEnabled = true;

        SmallMessage(player, <"   <0>  <1>", IconString(Icon.Checkmark), local.showKillStreaksNotifStr>);
    }
    else
    {
        if (!showStatsEnabled)
            showAllEnabled = false;

        SmallMessage(player, <"   <0>  <1>", IconString(Icon.No), local.hideKillStreaksNotifStr>);
    }
}

void ToggleHeal() playervar "Menu Option Sub : Toggle Heal"
{
    healEnabled = !healEnabled;
    if (healEnabled)
    {
        SmallMessage(player, <"   <0>  <1>", IconString(Icon.Checkmark), local.enableHealNotifStr>);
    }
    else
    {
        SmallMessage(player, <"   <0>  <1>", IconString(Icon.No), local.disableHealNotifStr>);
    }
}

void ModifyHeal() playervar "Menu Option Sub : Modify Heal Amount"
{
    if (!sec)
    {
        healAmt += healIncrement;

        if (healAmt > finalHeal)
            healAmt = healIncrement;
    }
    else
    {
        healAmt -= healIncrement;

        if (healAmt < healIncrement)
            healAmt = finalHeal;
    }
}

void ModifyHealDur() playervar "Menu Option Sub : Modify Heal Duration"
{
    if (!sec)
    {
        healDur += 0.50;

        if (healDur > S_HOT_TIME + 8)
            healDur = S_HOT_TIME;
    }
    else
    {
        healDur -= 0.50;

        if (healDur < S_HOT_TIME)
            healDur = S_HOT_TIME + 8;
    }
}

void ToggleRandomHero() playervar "Menu Option Sub : Random Hero"
{
    randomHeroEnabled = !randomHeroEnabled;
    if (randomHeroEnabled)
    {
        SmallMessage(player, <"   <0>  <1>", IconString(Icon.Checkmark), local.enableRandomHeroNotifStr>);
    }
    else
    {
        SmallMessage(player, <"   <0>  <1>", IconString(Icon.No), local.disableRandomHeroNotifStr>);

        # unsure if these are necessary
        ResetHeroAvailability();
        StopForcingHero();
    }
}