import "../main.del";
import "options.del";

globalvar Number[] ITEM_Y_POS;
playervar Number[] itemYPos;
playervar Boolean menuInit;

globalvar Number[] exclFav;
playervar Number selItem;
playervar Number favItem;
playervar String favItemStr;
playervar Boolean menu;
playervar Any cursor;
playervar Vector facing;

enum Item
{
    Invalid = -1,

    AllHUD = 0,
    Stats = 1,
    Streak = 2,

    Heal = 3,
    HealMod = 4,
    HealDurMod = 5,

    Random = 6,

    Language = 7,
    EN = 8,
    JP = 9
}

Color SelectedPulse(): 
    CustomColor(Oscillate(500, 0, 116), Oscillate(500, 153, 199), 255, 255);

// cursor math credit to josbird
Number CursorX(Player p = local): AngleDifference(HorizontalAngleFromDirection(Facing(p)), HorizontalAngleFromDirection(p.facing));
Number CursorY(Player p = local): AngleDifference(VerticalAngleFromDirection(Facing(p)), VerticalAngleFromDirection(p.facing));

Vector MenuYFromMenuZ(Vector z): DirectionFromAngles(HorizontalAngleFromDirection(z), VerticalAngleFromDirection(z) - 90);
Any RenderPosOf(Number x = 0, Number y = 0): 
    Update(EyePos(local) + 100 * (x * Cross(Facing(local), MenuYFromMenuZ(Facing(local))) + y * MenuYFromMenuZ(Facing(local)) + 3 * Facing(local)));

Number SCREEN_WIDTH:   3.65;
Number SCREEN_HEIGHT:  2.125;

rule: "Menu : Create Menu Options : Welcome to Hell 2"
if (S_MENU)
{
    # excluded options from favoriting
    exclFav = [Item.Invalid, Item.HealMod, Item.HealDurMod, Item.Language, Item.EN, Item.JP];

    ITEM_Y_POS = [1.62, // 0 (frame)
                  1.50, // 1
                  1.40, // 2
                  1.30, // 3
                  1.125, // 4
                  1.025, // 5
                  0.925, // 6
                  0.725, // 7
                  0.525, // 8
                  0.425 // 9
                ];

    # instructions
    CreateInWorldText(
        VisibleTo:    local.menu || local.closeAnim ? local : null,
        Header:       <"<0>   ┃   <1><4> / <5>   ┃   <2><3>", 
                      local.navigateMenuStr, local.selectMenuItemStr, local.favoriteMenuItemStr, 
                      BindString(Button.Reload), BindString(Button.PrimaryFire), BindString(Button.SecondaryFire)>, 
        Position:     RenderPosOf(0, local.itemYPos[0]), 
        Scale:        1.35,
        Reevaluation: InworldTextRev.VisibleToPositionStringAndColor,
        Clipping:     Clipping.DoNotClip,
        Spectators:   Spectators.VisibleNever
    );

    // contents
    # all hud toggle
    CreateInWorldText(
        VisibleTo:      local.menu || local.closeAnim ? local : null, 
        Header:         <"<0>   <1> ▼<2>", local.showStatsEnabled && local.showStreakEnabled 
                                                ? IconString(Icon.Checkmark) 
                                                : local.showStatsEnabled || local.showStreakEnabled && !(local.showStatsEnabled && local.showStreakEnabled) 
                                                    ? IconString(Icon.Asterisk) 
                                                    : IconString(Icon.No), 
                                            local.showWorkshopHudItemStr,
                                            local.favItem == Item.AllHUD 
                                                ? "  " + IconString(Icon.Heart) 
                                                : "">,
        Position:       RenderPosOf(0, local.itemYPos[Item.AllHUD + 1]), 
        Scale:          1.25,
        TextColor:      local.selItem == Item.AllHUD 
                            ? SelectedPulse() 
                            : local.showStatsEnabled && local.showStreakEnabled && S_MODIFY_HUD
                                ? Color.Green 
                                : S_MODIFY_HUD 
                                    ? local.showStatsEnabled || local.showStreakEnabled && !(local.showStatsEnabled && local.showStreakEnabled) 
                                        ? CustomColor(255, 255, 0, 255)
                                        : CustomColor(255, 0, 0, 255)
                                    : Color.Gray, 
        Reevaluation:   InworldTextRev.VisibleToPositionStringAndColor,
        Clipping:       Clipping.DoNotClip,
        Spectators:     Spectators.VisibleNever);
    # stats toggle
    CreateInWorldText(
        VisibleTo:      local.menu || local.closeAnim ? local : null, 
        Header:         <"<0>   <1><2>", local.showStatsEnabled ? IconString(Icon.Checkmark) : IconString(Icon.No), 
                                    local.showStatsItemStr,
                                    local.favItem == Item.Stats 
                                        ? "  " + IconString(Icon.Heart) 
                                        : "">,
        Position:       RenderPosOf(0, local.itemYPos[Item.Stats + 1]), 
        Scale:          1.25,
        TextColor:      local.selItem == Item.Stats 
                            ? SelectedPulse() 
                            : S_MODIFY_HUD
                                ? local.showStatsEnabled
                                    ? Color.Green
                                    : CustomColor(255, 0, 0, 255)
                                : Color.Gray,
        Reevaluation:   InworldTextRev.VisibleToPositionStringAndColor,
        Clipping:       Clipping.DoNotClip,
        Spectators:     Spectators.VisibleNever);
    # streak toggle
    CreateInWorldText(
        VisibleTo:      local.menu || local.closeAnim ? local : null, 
        Header:         <"<0>   <1><2>", local.showStreakEnabled ? IconString(Icon.Checkmark) : IconString(Icon.No), 
                                    local.showKillStreaksItemStr,
                                    local.favItem == Item.Streak 
                                        ? "  " + IconString(Icon.Heart) 
                                        : "">,
        Position:       RenderPosOf(0, local.itemYPos[Item.Streak + 1]), 
        Scale:          1.25,
        TextColor:      local.selItem == Item.Streak 
                            ? SelectedPulse() 
                            : S_MODIFY_HUD
                                ? local.showStreakEnabled
                                    ? Color.Green
                                    : CustomColor(255, 0, 0, 255)
                                : Color.Gray,
        Reevaluation:   InworldTextRev.VisibleToPositionStringAndColor,
        Clipping:       Clipping.DoNotClip,
        Spectators:     Spectators.VisibleNever);

    # healing toggle
    CreateInWorldText(
        VisibleTo:      local.menu || local.closeAnim ? local : null, 
        Header:         <"<0>   <1><2>▼<3>", local.healEnabled ? IconString(Icon.Checkmark) : IconString(Icon.No), 
                                    local.healingItemStr,
                                    local.healTypeDescriptorStr,
                                    local.favItem == Item.Heal 
                                        ? "  " + IconString(Icon.Heart) 
                                        : "">,
        Position:       RenderPosOf(0, local.itemYPos[Item.Heal + 1]), 
        Scale:          1.25,
        TextColor:      local.selItem == Item.Heal
                            ? SelectedPulse() 
                            : S_MODIFY_HEAL
                                ? local.healEnabled && S_MODIFY_HEAL
                                    ? Color.Green
                                    : CustomColor(255, 0, 0, 255)
                                : Color.Gray,
        Reevaluation:   InworldTextRev.VisibleToPositionStringAndColor,
        Clipping:       Clipping.DoNotClip,
        Spectators:     Spectators.VisibleNever);

    // todo: replace heal amount and heal duration with sliding progress bars: see "swiss" project
    # heal amount
    CreateInWorldText(
        VisibleTo:      local.menu || local.closeAnim ? local : null, 
        Header:         local.selItem == Item.HealMod
                            ? <"<1>    -   <0>   +    <2>", !flatHeal
                                                                ? DuoStringReplace(local.healAmt * 100, ".00", ".50", "", ".5") + "%"
                                                                : <"<0> HP<1>", local.healAmt,
                                                                                    local.healAmt >= MaxHealth(local) 
                                                                                        ? local.healToFullStr 
                                                                                        : "">,
                                                            BindString(Button.SecondaryFire), BindString(Button.PrimaryFire)> 
                            : !flatHeal
                                ? DuoStringReplace(local.healAmt * 100, ".00", ".50", "", ".5") + "%"
                                : <"<0> HP<1>", local.healAmt, 
                                                    local.healAmt >= MaxHealth(local) 
                                                        ? local.healToFullStr 
                                                        : "">,
        Position:       RenderPosOf(0, local.itemYPos[Item.HealMod + 1]), 
        Scale:          1.25,
        TextColor:      local.selItem == Item.HealMod 
                            ? SelectedPulse() 
                            : local.healEnabled && S_MODIFY_HEAL
                                ? Color.White 
                                : Color.Gray,
        Reevaluation:   InworldTextRev.VisibleToPositionStringAndColor,
        Clipping:       Clipping.DoNotClip,
        Spectators:     Spectators.VisibleNever);
    # heal duration
    CreateInWorldText(
        VisibleTo:      local.menu || local.closeAnim ? local : null, 
        Header:         local.selItem == Item.HealDurMod
                            ? <"<1>    -   <0>   +    <2>", local.healDur >= 0.5
                                                                ? local.healDur != 1 
                                                                    ? DuoStringReplace(local.healDur, ".00", ".50", "", ".5") + local.amountOfSecondsStr
                                                                    : <"<0><1>", local.healDur, local.oneSecondStr>
                                                                : local.instantHealDurStr,
                                                            BindString(Button.SecondaryFire), BindString(Button.PrimaryFire)> 
                            : local.healDur >= 0.5
                                ? local.healDur != 1 
                                    ? DuoStringReplace(local.healDur, ".00", ".50", "", ".5") + local.amountOfSecondsStr
                                    : <"<0><1>", local.healDur, local.oneSecondStr>
                                : local.instantHealDurStr,
        Position:       RenderPosOf(0, local.itemYPos[Item.HealDurMod + 1]), 
        Scale:          1.25,
        TextColor:      local.selItem == Item.HealDurMod 
                            ? SelectedPulse() 
                            : local.healEnabled && S_MODIFY_HEAL
                                ? Color.White 
                                : Color.Gray,
        Reevaluation:   InworldTextRev.VisibleToPositionStringAndColor,
        Clipping:       Clipping.DoNotClip,
        Spectators:     Spectators.VisibleNever);

    # random hero
    CreateInWorldText(
        VisibleTo:      local.menu || local.closeAnim ? local : null, 
        Header:         <"<0>   <1><2>", local.randomHeroEnabled ? IconString(Icon.Checkmark) : IconString(Icon.No), 
                                    local.randomHeroItemStr,
                                    local.favItem == Item.Random 
                                        ? "  " + IconString(Icon.Heart) 
                                        : "">,
        Position:       RenderPosOf(0, local.itemYPos[Item.Random + 1]), 
        Scale:          1.25,
        TextColor:      local.selItem == Item.Random 
                            ? SelectedPulse() 
                            : S_MODIFY_RANDOMHERO
                                ? local.randomHeroEnabled 
                                    ? Color.Green
                                    : CustomColor(255, 0, 0, 255)
                                : Color.Gray,
        Reevaluation:   InworldTextRev.VisibleToPositionStringAndColor,
        Clipping:       Clipping.DoNotClip,
        Spectators:     Spectators.VisibleNever);

    # language
    CreateInWorldText(
        VisibleTo:      local.menu || local.closeAnim ? local : null, 
        Header:         local.langProgStr == "" 
                            ? <"<0> ▼", local.languageItemStr> 
                            : local.langProgStr,
        Position:       RenderPosOf(0, local.itemYPos[Item.Language + 1]), 
        Scale:          1.25,
        TextColor:      Color.White,
        Reevaluation:   InworldTextRev.VisibleToPositionStringAndColor,
        Clipping:       Clipping.DoNotClip,
        Spectators:     Spectators.VisibleNever);
    # english
    CreateInWorldText(
        VisibleTo:      local.menu || local.closeAnim ? local : null, 
        Header:         "English",
        Position:       RenderPosOf(-0.15, local.itemYPos[Item.EN + 1]), 
        Scale:          1.25,
        TextColor:      local.selItem == Item.EN 
                            ? SelectedPulse() 
                                : !local.langSwap 
                                    ? local.language == Lang.EN 
                                        ? Color.Blue
                                        : Color.White 
                                    : Color.Gray,
        Reevaluation:   InworldTextRev.VisibleToPositionStringAndColor,
        Clipping:       Clipping.DoNotClip,
        Spectators:     Spectators.VisibleNever);
    # japanese
    CreateInWorldText(
        VisibleTo:      local.menu || local.closeAnim ? local : null, 
        Header:         "日本語",
        Position:       RenderPosOf(0.15, local.itemYPos[Item.EN + 1]), 
        Scale:          1.25,
        TextColor:      local.selItem == Item.JP 
                            ? SelectedPulse() 
                                : !local.langSwap 
                                    ? local.language == Lang.JP 
                                        ? Color.Blue
                                        : Color.White 
                                    : Color.Gray,
        Reevaluation:   InworldTextRev.VisibleToPositionStringAndColor,
        Clipping:       Clipping.DoNotClip,
        Spectators:     Spectators.VisibleNever);
}

rule: "Menu : Open/Close"
Event.OngoingPlayer
if (S_MENU)
if (menuInit)
if (IsAlive())
if (IsInteractHeld())
{
    WaitIfTrue(0.2);

    // cursor
    CreateInWorldText(
        VisibleTo:      player,
        Header:         "↖",
        Position:       RenderPosOf(CursorX(player) + 0.05, CursorY(player) - 0.105),
        TextColor:      selItem == Item.Invalid ? Rainbow() : SelectedPulse(),
        Scale:          3,
        Clipping:       Clipping.DoNotClip,
        Reevaluation:   InworldTextRev.VisibleToPositionStringAndColor
    );
    cursor = LastTextID(); // store to destroy just in case theres performance issues when menu is not open

    menu = true;
    DisableHeroHud();
    Number openTime = TotalTimeElapsed();

    if (!hasOpenedMenu)
        hasOpenedMenu = true;

    interactTaps = 0;

    facing = Facing();
    SetAimSpeed(player, 10);
    DisallowButton(player, Button.PrimaryFire);
    DisallowButton(player, Button.SecondaryFire);

    selItem = Item.Invalid;

    WaitUntil(!IsInteractHeld() || IsDead(), 99999);

    menu = false;
    EnableHeroHud();
    selItem = Item.Invalid;
    LogToInspector(<"<0> had menu open for <1> seconds", player, TotalTimeElapsed() - openTime>);
    DestroyInWorldText(cursor);

    MinWait();

    SetAimSpeed(player, 100);
    AllowButton(player, Button.PrimaryFire);
    AllowButton(player, Button.SecondaryFire);

    if (S_USE_MENU_ANIM)
        WaitUntil(!closeAnim && !anim, 1);
    else 
        Wait(0.1);
}

playervar Boolean anim;
playervar Boolean closeAnim;
Number anim_start: 2.15;
Number anim_end: 2.14;
Number anim_speed: 0.3;
rule: "Menu : Open Animation"
Event.OngoingPlayer
if (S_USE_MENU_ANIM)
if (menu)
if (!closeAnim)
{
    anim = true;

    while (menu && anim)
    {
        for (Number i = 0; i < ITEM_Y_POS.Length; i++)
            itemYPos[i] += (ITEM_Y_POS[i] - itemYPos[i]) * anim_speed;

        if (itemYPos.Last <= ITEM_Y_POS.Last + 0.01)
        {
            anim = false;
            break;
        }

        MinWait();
    }

    anim = false;
}

rule: "Menu : Close Animation"
Event.OngoingPlayer
if (S_USE_MENU_ANIM)
if (hasOpenedMenu)
if (!menu)
{
    WaitUntil(!anim, 1);
    closeAnim = true;
    anim = true;

    while (anim && closeAnim)
    {
        for (Number i = 0; i < ITEM_Y_POS.Length; i++)
            itemYPos[i] += (anim_start - itemYPos[i]) * anim_speed;

        if (itemYPos.Last >= anim_end)
        {
            anim = false;
            break;
        }

        MinWait();
    }

    anim = false;
    closeAnim = false;
}

rule: "Menu : Get Hovered Item"
Event.OngoingPlayer
if (menu) 
{
    Number X = CursorX(player);
    Number Y = CursorY(player);

    selItem = Item.Invalid;

    // ass to read but its a lot more optimal
    if (S_MODIFY_HUD) 
    {
        if                             (Abs(X) < itemWidth[Item.AllHUD] &&     IsInRange(Y, 1.500, 1.600))
            selItem = Item.AllHUD;

        else if                        (Abs(X) < itemWidth[Item.Stats]  &&     IsInRange(Y, 1.400, 1.500))
            selItem = Item.Stats;

        else if                        (Abs(X) < itemWidth[Item.Streak] &&     IsInRange(Y, 1.300, 1.400))
            selItem = Item.Streak;
    }

    if (S_MODIFY_HEAL) 
    {
        if                             (Abs(X) < itemWidth[Item.Heal] &&       IsInRange(Y, 1.125, 1.225))
            selItem = Item.Heal;

        else if (healEnabled &&         Abs(X) < itemWidth[Item.HealMod] &&    IsInRange(Y, 1.025, 1.125))
            selItem = Item.HealMod;

        else if (healEnabled &&         Abs(X) < itemWidth[Item.HealDurMod] && IsInRange(Y, 0.925, 1.025))
            selItem = Item.HealDurMod;
    }

    if (S_MODIFY_RANDOMHERO &&          Abs(X) < itemWidth[Item.Random] &&     IsInRange(Y, 0.725, 0.825))
        selItem = Item.Random;

    if (!langSwap)
    {
        if (language != Lang.EN &&      IsInRange(X, -0.300, 0.000) &&         IsInRange(Y, 0.425, 0.525))
            selItem = Item.EN;

        if (language != Lang.JP &&      IsInRange(X,  0.000, 0.250) &&         IsInRange(Y, 0.425, 0.525))
            selItem = Item.JP;
    }

    Wait(0.048);
    LoopIfConditionIsTrue();
}

void SelectionHandler(Number | Item item) playervar "Menu Sub : Selection Handler"
{
    switch (item)
    {
        case Item.AllHUD:
            async! ToggleAllHud();
            LogToInspector(<"<0> toggled All HUD", player>);
            break;
        case Item.Stats:
            async! ToggleStats();
            LogToInspector(<"<0> toggled Stats", player>);
            break;
        case Item.Streak:
            async! ToggleStreak();
            LogToInspector(<"<0> toggled Streak HUD", player>);
            break;
        case Item.Heal:
            async! ToggleHeal();
            LogToInspector(<"<0> toggled Heal", player>);
            break;
        case Item.HealMod:
            async! ModifyHeal();
            break;
        case Item.HealDurMod:
            async! ModifyHealDur();
            break;
        case Item.Random:
            async! ToggleRandomHero();
            LogToInspector(<"<0> toggled Random Hero", player>);
            break;
        case Item.EN:
            if (language != Lang.EN && !langSwap)
            {
                async! StupidLangSwapSpin();
                async! SetStringsToEnglish();
            }

            LogToInspector(<"<0> set language to English", player>);
            break;
        case Item.JP:
            if (language != Lang.JP && !langSwap)
            {
                async! StupidLangSwapSpin();
                async! SetStringsToJapanese();
            }

            LogToInspector(<"<0> set language to Japanese", player>);
            break;
    }
}

playervar Boolean sec;
rule: "Menu : Select Hovered Item"
Event.OngoingPlayer
if (menu)
if (selItem != Item.Invalid)
if (IsPrimaryHeld() || IsSecondaryHeld())
{
    Number sel! = selItem;
    if ((sel != Item.HealMod) && (sel != Item.HealDurMod))
    {
        WaitUntil(!IsPrimaryHeld() && !IsSecondaryHeld(), 99999);

        async! SelectionHandler(sel);
        Wait(0.5);
        LoopIfConditionIsTrue(); // loop to prevent players inputs from being eaten cuz otherwise it feels like shit
    }
    else 
    {
        while (IsPrimaryHeld() || IsSecondaryHeld())
        {
            sec = IsSecondaryHeld();
            async! SelectionHandler(sel);
            WaitIfTrue(0.15);

            if (selItem != sel)
                break;
        }
    }
}

// bit clunky but it works
playervar Number interactTaps;
rule: "Menu : Interact Taps"
Event.OngoingPlayer
if (IsAlive())
if (favItem != Item.Invalid)
if (IsButtonHeld(player, Button.Interact))
{
    interactTaps++;
}

rule: "Menu : Reset Interact Taps"
Event.OngoingPlayer
if (favItem != Item.Invalid)
if (!IsButtonHeld(player, Button.Interact))
{
    WaitIfTrue(0.1);
    interactTaps = 0;
}

rule: "Menu : Favorite Item"
Event.OngoingPlayer
if (menu)
if (IsReloadHeld())
if (!exclFav.Contains(selItem))
{
    WaitUntil(!IsReloadHeld(), 99999);

    favItemStr = "";
    favItem = selItem == favItem ? Item.Invalid : selItem;

    switch (selItem)
    {
        case Item.AllHUD: 
            favItemStr = showWorkshopHudItemStr;
            break;
        case Item.Stats: 
            favItemStr = showStatsItemStr;
            break;
        case Item.Streak: 
            favItemStr = showKillStreaksItemStr;
            break;
        case Item.Heal: 
            favItemStr = healingItemStr;
            break;
        case Item.Random: 
            favItemStr = randomHeroItemStr;
            break;
    }

    LogToInspector(<"<0> favorited ID <1> (\"<2>\")", player, favItem, favItemStr>);

    Wait(0.5);
}

rule: "Menu : Favorite Toggle"
Event.OngoingPlayer
if (!menu)
if (interactTaps == 2)
if (favItem != -1)
{
    WaitUntil(!IsReloadHeld(), 99999);

    interactTaps = 0;
    async! SelectionHandler(favItem);
    Wait(0.5);
}

rule: "Menu Cursor : Reset Cursor if outside of screen bounds"
Event.OngoingPlayer
if (menu)
if (Abs(CursorX(player)) > SCREEN_WIDTH || Abs(CursorY(player)) > SCREEN_HEIGHT)
{
    SetFacing(Direction: facing);

    MinWait();
    LoopIfConditionIsTrue();
}
