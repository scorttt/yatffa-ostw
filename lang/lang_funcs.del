import "../main.del";

enum Lang
{
    EN,
    JP,
    KR,
    MX
}

// menu info
playervar String holdToOpenMenuStr!;
playervar String releaseToHideMenuStr!;
playervar String doubleTapToToggleFavStr!;
playervar String warningStr!;
playervar String navigateMenuStr!;
playervar String selectMenuItemStr!;
playervar String favoriteMenuItemStr!;
playervar String healTypeDescriptorStr!;

// respawn
playervar String pressToRespawnInstantlyStr!;
playervar String useNormalHeroSelectStr!;

// kill streak
playervar String currentKillStreakStr!;
playervar String lastKillstreakStr!;
playervar String killStreakPersonalBestStr!;
playervar String killStreakServerBestStr!;
playervar String playerGotServerBestKillStreakStr!;
playervar String youStr!;
playervar String bestKillStreakByPlayer!;

// generic stats
playervar String kdrStatStr!;
playervar String dmgRatioStatStr!;
playervar String dmgOutStatStr!;
playervar String dmgInStatStr!;
playervar String accuracyStatStr!;
playervar String critAccuracyStatStr!;
playervar String scopeAccuracyStatStr!;
playervar String scopeCritAccuracyStatStr!;
playervar String environmentKillsStatStr!;
playervar String healingStatStr!;
playervar String bestKillStreakStatStr!;

// global
playervar String welcomeStr!;
playervar String quote1Str!;
playervar String quote2Str!;
playervar String amountOfMinutesStr!;
playervar String amountOfSecondsStr!;
playervar String amountOfMinutesShortStr!;
playervar String amountOfSecondsShortStr!;
playervar String oneMinuteStr!;
playervar String oneSecondStr!;
playervar String metersStr!;

// kick/ban
playervar String voteStartedByStr!;
playervar String voteSelectionStr!;
playervar String voteYesStr!;
playervar String voteNoStr!;
playervar String kickTargetStr!;
playervar String banTargetStr!;
playervar String voteChoiceStr!;
playervar String voteSucceedStr!;
playervar String voteFailStarterLeftStr!;
playervar String voteFailNotEnoughPlayersStr!;
playervar String voteFailTimeOutStr!;
playervar String playerWasVoteKickedStr!;
playervar String playerWasVoteBannedStr!;
playervar String playerWasAFKKickedStr!;
playervar String playerAFKKickTimerStr!;

// menu items
playervar String healToFullStr!;
playervar String instantHealDurStr!;
playervar String showWorkshopHudItemStr!;
playervar String showStatsItemStr!;
playervar String showKillStreaksItemStr!;
playervar String healingItemStr!;
playervar String randomHeroItemStr!;
playervar String languageItemStr!;
playervar String startVoteKick!;
playervar String startVoteBan!;
playervar String changelog!;

// small message enabled notifications
playervar String showWorkshopHudNotifStr!;
playervar String showStatsNotifStr!;
playervar String showKillStreaksNotifStr!;
playervar String enableHealNotifStr!;
playervar String enableRandomHeroNotifStr!;

// small message disabled notifications
playervar String hideWorkshopHudNotifStr!;
playervar String hideStatsNotifStr!;
playervar String hideKillStreaksNotifStr!;
playervar String disableHealNotifStr!;
playervar String disableRandomHeroNotifStr!;

// hero stat values
playervar String[] statMetric;
playervar String[] heroStatStr;
playervar Number[] heroStatVal;
playervar Number[][] heroStatStorage;

// hero stats strings
playervar String sleepDartAccStr!;
playervar String sleepDartsHitStr!;

playervar String coachGunKillsStr!;
playervar String dynamiteKillsStr!;

playervar String grenadesStuckStr!;
playervar String grenadeStickAccStr!;
playervar String grenadeKillsStr!;

playervar String damageDeflectedStr!;

playervar String healUsageStr!;
playervar String speedUsageStr!;
playervar String avgTimeOnWallStr!;

playervar String directHitAccStr!;
playervar String concBlastKillsStr!;
playervar String airTimeEfficacyStr!; // time spent in air vs on ground
playervar String avgTimeInAirStr!;

playervar String railgunKillsStr!;
playervar String railgunAccStr!;
playervar String avgChargeStr!;

playervar String helixDirectHitsStr!;
playervar String helixDirectAccStr!;

playervar String distanceTeleportedStr!;
playervar String virusHitsStr!;
playervar String virusKillsStr!;
playervar String virusAccStr!;

playervar String hammerKillsStr!;
playervar String overloadEfficacyStr!; // percentage of health that is absorbed by bonus hp

playervar String bombsStuckStr!;
playervar String bombsStickAccStr!;
playervar String bombKillsStr!;
playervar String healthRecalledStr!;

playervar String airShotAccStr!;

playervar String airKillsStr!;

playervar String javelinsHitStr!;
playervar String javelinKillsStr!;
playervar String javelinAccStr!;
playervar String fortifyEfficacyStr!; // percentage of health that is absorbed by bonus hp

playervar String knivesHitStr!;
playervar String knifeKillsStr!;
playervar String knifeAccStr!;
playervar String shoutEfficacyStr!; // percentage of health that is absorbed by bonus hp
playervar String healedFromAbilitiesStr!;

playervar String rocksHitStr!;
playervar String rockAccStr!;

playervar String focusingBeamAccStr!;
playervar String focusingBeamKillsStr!;
playervar String focusingBeamEfficacyStr!; // percentage of time focusing beam is dealing bonus damage on low health targets

playervar String hooksHitStr!;
playervar String hookAccStr!;

playervar String firestrikesHitStr!;
playervar String firestrikeKillsStr!;
playervar String firestrikeAccStr!;

playervar String whipshotsHitStr!;
playervar String whipshotKillsStr!;
playervar String whipshotAccStr!;

playervar String nemesisEfficacyStr!; // percentage of health that is absorbed by bonus hp



void SetHeroStats() playervar "Set Hero Stat"
{
    WaitUntil(HasSpawned() && IsAlive(), 99999);

    heroStatStr = [];
    statMetric = [];

    switch (HeroOf())
    {
        case Hero.Ana:
            heroStatStr[0] = sleepDartAccStr;
            heroStatStr[1] = sleepDartsHitStr;

            statMetric[0] = "%";
            break;
        case Hero.Ashe:
            heroStatStr[0] = coachGunKillsStr;
            heroStatStr[1] = dynamiteKillsStr;

            break;
        case Hero.Bastion:
            heroStatStr[0] = grenadeKillsStr;
            heroStatStr[1] = grenadesStuckStr;
            heroStatStr[2] = grenadeStickAccStr;

            statMetric[2] = "%";
            break;
        case Hero.Brigitte:
            heroStatStr[0] = whipshotKillsStr;
            heroStatStr[1] = whipshotsHitStr;
            heroStatStr[2] = whipshotAccStr;

            statMetric[2] = "%";
            break;
        case Hero.Echo:
            heroStatStr[0] = bombKillsStr;
            heroStatStr[1] = bombsStuckStr;
            heroStatStr[2] = bombsStickAccStr;
            heroStatStr[3] = focusingBeamAccStr;
            heroStatStr[4] = focusingBeamKillsStr;
            heroStatStr[5] = focusingBeamEfficacyStr;
            heroStatStr[6] = avgTimeInAirStr;

            statMetric[2] = "%";
            statMetric[3] = "%";
            statMetric[5] = "%";
            statMetric[6] = amountOfSecondsShortStr;
            break;
        case Hero.Genji:
            heroStatStr[0] = damageDeflectedStr;

            break;
        case Hero.JunkerQueen:
            heroStatStr[0] = knifeKillsStr;
            heroStatStr[1] = knivesHitStr;
            heroStatStr[2] = knifeAccStr;
            heroStatStr[3] = shoutEfficacyStr;
            heroStatStr[4] = healedFromAbilitiesStr;
 
            statMetric[2] = "%";
            statMetric[3] = "%";
            break;
        case Hero.Lucio:
            heroStatStr[0] = healUsageStr;
            heroStatStr[1] = speedUsageStr;
            heroStatStr[2] = avgTimeOnWallStr;
 
            statMetric[0] = "%";
            statMetric[1] = "%";
            statMetric[2] = amountOfSecondsShortStr;
            break;
        case Hero.Orisa:
            heroStatStr[0] = javelinKillsStr;
            heroStatStr[1] = javelinsHitStr;
            heroStatStr[2] = javelinAccStr;
            heroStatStr[3] = fortifyEfficacyStr;
 
            statMetric[2] = "%";
            statMetric[3] = "%";
            break;
        case Hero.Pharah:
            heroStatStr[0] = directHitAccStr;
            heroStatStr[1] = concBlastKillsStr;
            heroStatStr[2] = avgTimeInAirStr;
            heroStatStr[3] = airTimeEfficacyStr;

            statMetric[0] = "%";
            statMetric[2] = amountOfSecondsShortStr;
            statMetric[3] = "%";
            break;
        case Hero.Ramattra:
            heroStatStr[0] = nemesisEfficacyStr;

            statMetric[0] = "%";
            break;
        case Hero.Reinhardt:
            heroStatStr[0] = firestrikeKillsStr;
            heroStatStr[1] = firestrikesHitStr;
            heroStatStr[2] = firestrikeAccStr;

            statMetric[2] = "%";
            break;
        case Hero.Roadhog:
            heroStatStr[0] = hooksHitStr;
            heroStatStr[1] = hookAccStr;
            heroStatStr[2] = healedFromAbilitiesStr;
            break;
        case Hero.Sigma:
            heroStatStr[0] = rocksHitStr;
            heroStatStr[1] = rockAccStr;
            heroStatStr[2] = healedFromAbilitiesStr;

            break;
        case Hero.Sojourn:
            heroStatStr[0] = railgunKillsStr;
            heroStatStr[1] = railgunAccStr;
            heroStatStr[2] = avgChargeStr;

            statMetric[1] = "%";
            statMetric[2] = "%";
            break;
        case Hero.Soldier76:
            heroStatStr[0] = helixDirectHitsStr;
            heroStatStr[1] = helixDirectAccStr;

            statMetric[1] = "%";
            break;
        case Hero.Sombra:
            heroStatStr[0] = distanceTeleportedStr;
            heroStatStr[1] = virusKillsStr;
            heroStatStr[2] = virusHitsStr;
            heroStatStr[3] = virusAccStr;

            statMetric[0] = metersStr;
            statMetric[3] = "%";
            break;
        case Hero.Torbjorn:
            heroStatStr[0] = hammerKillsStr;
            heroStatStr[1] = overloadEfficacyStr;

            statMetric[1] = "%";
            break;
        case Hero.Tracer:
            heroStatStr[0] = bombKillsStr;
            heroStatStr[1] = bombsStuckStr;
            heroStatStr[2] = bombsStickAccStr;
            heroStatStr[3] = healthRecalledStr;

            statMetric[2] = "%";
            break;
        case Hero.Venture:
            heroStatStr[0] = directHitAccStr;
            heroStatStr[1] = airShotAccStr;

            statMetric[0] = "%";
            statMetric[1] = "%";
            break;
        case Hero.Widowmaker:
            heroStatStr[0] = airKillsStr;
            break;
        default: 
            heroStatStr = [];
            statMetric = [];
            break;
    }
}

// void SetLanguageX(Number charWidth) playervar "Set Language X Sub"
// {
//     itemWidth[4] = 0.400;
//     itemWidth[5] = 0.400;

//     Number strLen = StringLength(langStr[LStr.Items][i]);
//     if (i != Item.Heal)
//         langX[i] = 0.10 + (strLen * charWidth);
//     else
//         langX[i] = 0.10 + (strLen + StringLength(langStr[LStr.Misc][12 + S_HEAL_TYPE])) * charWidth;

//     MinWait();
// }

playervar Boolean spin;
void DumbWait(Number wait) { if (spin) Wait(wait); } // why cant i just use WaitIfTrue in a while
void StupidLangSwapSpin() playervar "Stupid Language Swap Spin Load Thing"
{
    while (spin)
    {
        langProgStr = "ー";
        DumbWait(0.1);

        langProgStr = "/";
        DumbWait(0.1);

        langProgStr = "|";
        DumbWait(0.1);

        langProgStr = "\\";
        DumbWait(0.1);
    }
}