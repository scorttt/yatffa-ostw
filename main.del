// Created by scort: https://github.com/scorttt/yatffa-ostw
// workshop.codes listing: https://workshop.codes/BKRXY

import "settings/settings.del";
// import "settings/jpsettings.del";
// import "settings/debug_settings.del";

import "../macros-ostw/main.del";

import "afk.del";
import "healing/healmain.del";
import "healing/hok.del";
import "healing/healpickup.del";
import "hud.del";
import "debug.del";

import "menu.del";

import "lang.del";

// import "hero specific/ana.del";
// import "hero specific/ashe.del";
// import "hero specific/bastion.del";
// import "hero specific/venture.del";

globalvar Any aaaaaCreatedByScort;
globalvar Hero[] boundingBoxArr;
globalvar Boolean S_LITE_MODE;

globalvar Number S_MATCH_TIME;
globalvar Boolean S_DESTROY_RAILINGS;

globalvar Boolean S_STREAKS_ENABLED;
globalvar Boolean S_USE_OW_SCOREBORD;

globalvar Number S_HEAL_TYPE;
globalvar Boolean S_MENU;
globalvar Boolean S_USE_MENU_ANIM;
globalvar Boolean S_DEF_HUD;
globalvar Boolean S_DEF_STATS;
globalvar Boolean S_DEF_STREAK;
globalvar Boolean S_DEF_HEAL;
globalvar Boolean S_DEF_RANDOMHERO;

globalvar Number S_MAX_HEAL_ORBS;
globalvar Number S_ORB_TIME;
globalvar Boolean S_ORB_COLLECTION_DESPAWN;
globalvar Number S_ORB_COLLECT_DIST;

globalvar Boolean S_AFK_ENABLED;
globalvar Number S_AFK_TIME;
globalvar Number S_AFK_KICK_TIME;

globalvar Boolean S_MODIFY_HUD;
globalvar Boolean S_MODIFY_HEAL;
globalvar Boolean S_MODIFY_RANDOMHERO;

globalvar Boolean S_DISABLE_HEAL_STACK;
globalvar Number S_HOT_TIME;
globalvar Boolean S_HOT_INTERRUPT;
globalvar Number S_HOT_INTERRUPT_MIN_DMG;
globalvar Boolean S_INSTANT_RESPAWN;
globalvar Boolean S_SCORE_TO_WIN;
globalvar Number S_FLAT_HEAL_AMT;
globalvar Boolean S_HERO_HEALTH_CAP;
globalvar Number S_HERO_HEALTH_CAP_AMT;
// globalvar Boolean S_STOP_OW_AUTOHEAL;
globalvar Boolean flatHeal;
globalvar Number S_HEAL_PERCENT;
globalvar Number finalHeal;
globalvar Number healIncrement;
globalvar Number S_DEF_LANG;
globalvar Number S_DEF_RANDOMIZER_TYPE;
globalvar Boolean firstPoolRandomized;

globalvar Vector[] projLoc;

globalvar Any[] dbgUsrs;
playervar Boolean isDbgUsr;

playervar Boolean checkSpawn;
playervar Boolean hasOpenedMenu;
playervar Number userJoinTime;

globalvar String txCharacter;
// String TXString(String value): "{0}TX {1}>".Format([txCharacter, value]);

Boolean PlayerSwappedHero(Player p = player): p.heroOnLastDeath != HeroOf(p);
rule: "v2.4.0 | Created by scort#12211"
{
    # OSTW source code can be found at https://github.com/scorttt/yatffa-ostw - workshop.codes listing: https://workshop.codes/BKRXY
    DisableInspectorRecording();
}

rule: "Initial Global"
{
    aaaaaCreatedByScort = "2.4.0.250714 - scort#12211";
    dbgUsrs = ["scort", "gigaballs"];

    # unsanitized string stuff for the menu cursor, might break in future updates
    // CreateDummyBot(<Hero>AllHeroes(), <Team>host, false, null, null);
    // StartForcingDummyBotName(LastCreatedEntity(), "______________________________________________________________________________________________________________________________〼");
    // txCharacter = StringSplit(FirstOf(LastCreatedEntity()), EmptyArray());
    // StartForcingDummyBotName(LastCreatedEntity(), "______________________________________________________________________________________________________________________________ࡀ");
    // txCharacter = StringSlice(StringReplace("______________________________________________________________________________________________________________________________〼", txCharacter, FirstOf(LastCreatedEntity())), 126, true);
    // DestroyAllDummyBots();

    # array of heroes that are affected by the bounding box below mega on chataeu
    boundingBoxArr = [Hero.Pharah, Hero.Lucio];

    S_LITE_MODE = WorkshopSettingToggle("!. YATFFA Lite", "Enable Lite Mode (Disables everything except for Healing, destroying railings, and instant respawns)", false, 0);

    S_DEF_LANG = WorkshopSettingCombo("A. General", "Language", 0, ["English", "日本語", "한국어"], 0);
    S_MATCH_TIME = WorkshopSettingInteger("A. General", "Match Time (Minutes)", 30, 5, 60, 1) * 60;
    S_INSTANT_RESPAWN = WorkshopSettingToggle("A. General", "Respawn instantly on Interact", true, 2);
    S_SCORE_TO_WIN = WorkshopSettingToggle("A. General", "Use Score Win Condition", true, 3);
    S_DESTROY_RAILINGS = WorkshopSettingToggle("A. General", "Destroy Railings on Round Start (Chataeu Guillard Only)", true, 4);

    S_USE_OW_SCOREBORD = WorkshopSettingToggle("B. Overwatch Changes", "Use Overwatch's Deathmatch Scoreboard", false, 0);
    // S_STOP_OW_AUTOHEAL = WorkshopSettingToggle("B. Overwatch Changes", "Disable Overwatch's Auto Heal (Affects Shield Health Regen)", false, 1);
    S_HERO_HEALTH_CAP = WorkshopSettingToggle("B. Overwatch Changes", "Cap Hero Maximum Health on Spawn", true, 2);
    S_HERO_HEALTH_CAP_AMT = WorkshopSettingInteger("B. Overwatch Changes", "Maximum Hero Health (Only applicable if \"Cap Hero Health on Spawn\" is enabled)", 325, 150, 800, 3);

    S_AFK_ENABLED = WorkshopSettingToggle("C. AFK", "Enable AFK", true, 0);
    S_AFK_TIME = WorkshopSettingReal("C. AFK", "Time to put players in AFK (Seconds)", 35, 5, 600, 1);
    S_AFK_KICK_TIME = WorkshopSettingReal("C. AFK", "Time to Kick AFK Players (Seconds)", 180, 10, 600, 2) - S_AFK_TIME;

    S_MENU = WorkshopSettingToggle("D. Menu", "Enable Menu", true, 0);
    S_USE_MENU_ANIM = WorkshopSettingToggle("D. Menu", "Enable Menu Animations", true, 1);
    S_MODIFY_HUD = WorkshopSettingToggle("D. Menu", "Allow Modifying Workshop HUD menu toggles", true, 2);
    S_DEF_HUD = WorkshopSettingToggle("D. Menu", "\"Show Workshop HUD\" default menu toggle", true, 3);
    S_DEF_STREAK = WorkshopSettingToggle("D. Menu", "\"Show Kill Streaks\" default menu toggle", true, 4);
    S_DEF_STATS = WorkshopSettingToggle("D. Menu", "\"Show Player Stats\" default menu toggle", true, 5);

    S_STREAKS_ENABLED = WorkshopSettingToggle("E. HUD", "Enable Player Kill Streaks", true, 0);

    S_MODIFY_RANDOMHERO = WorkshopSettingToggle("F. Random Hero", "Allow Modifying \"Random Hero\" menu toggle", true, 0);
    S_DEF_RANDOMHERO = WorkshopSettingToggle("F. Random Hero", "\"Random Hero\" default menu toggle", false, 1);
    S_DEF_RANDOMIZER_TYPE  = WorkshopSettingCombo("F. Random Hero", "Default Randomizer Type", 0, ["Randomized Queue", "True Random"], 2);

    S_HEAL_TYPE = WorkshopSettingCombo("G. Healing", "Healing Type", 0, ["Heal On Kill", "Health Pickups", "None"], 0);
    S_MODIFY_HEAL = WorkshopSettingToggle("G. Healing", "Allow Modifying Healing menu settings", true, 1);
    S_DEF_HEAL = WorkshopSettingToggle("G. Healing", "\"Healing\" default menu toggle", true, 2);
    S_HEAL_PERCENT = WorkshopSettingCombo("G. Healing", "Heal Reward", 10,
        ["5% of Victims Max HP", "10% of Victims Max HP", "15% of Victims Max HP",
         "20% of Victims Max HP", "25% of Victims Max HP", "30% of Victims Max HP",
         "35% of Victims Max HP", "40% of Victims Max HP", "45% of Victims Max HP",
         "50% of Victims Max HP", "55% of Victims Max HP", "60% of Victims Max HP",
         "65% of Victims Max HP", "70% of Victims Max HP", "75% of Victims Max HP",
         "80% of Victims Max HP", "85% of Victims Max HP", "90% of Victims Max HP",
         "95% of Victims Max HP", "100% of Victims Max HP", "Use Flat Heal Rewards"], 3);

    S_FLAT_HEAL_AMT = WorkshopSettingInteger("G. Healing", "Flat Heal Amount (Only applicable if \"Use Flat Heal Rewards\" is set in Heal Reward)", 120, 1, 700, 4);
    S_HOT_TIME = Near(WorkshopSettingReal("G. Healing", "Healing Duration", 5, 0, 16, 5) * 2) / 2;
    S_DISABLE_HEAL_STACK = WorkshopSettingToggle("G. Healing", "Disable Stacking Heal Rewards with Healing Abilities", true, 6);
    S_HOT_INTERRUPT = WorkshopSettingToggle("G. Healing", "Interrupt Healing on damage taken", true, 8);
    S_HOT_INTERRUPT_MIN_DMG = WorkshopSettingReal("G. Healing", "Minimum Damage to Interrupt Healing (Only applicable if \"Interrupt Healing on damage taken\" is enabled)", 1, 0.1, 200, 9);

    S_ORB_TIME = WorkshopSettingInteger("H. Healing Pickups (Only applicable if \"Health Pickups\" is the healing type)", "Pickup Lifetime (Seconds)", 8, 2, 30, 0);
    S_MAX_HEAL_ORBS = WorkshopSettingInteger("H. Healing Pickups (Only applicable if \"Health Pickups\" is the healing type)", "Maximum amount of pickups per player (11+ may go over the 128 effect limit)", 10, 1, 20, 1);
    S_ORB_COLLECTION_DESPAWN = WorkshopSettingToggle("H. Healing Pickups (Only applicable if \"Health Pickups\" is the healing type)", "All pickups disappear after collection", false, 2);
    S_ORB_COLLECT_DIST = WorkshopSettingReal("H. Healing Pickups (Only applicable if \"Health Pickups\" is the healing type)", "Pickup Collection Distance (Meters)", 1.5, 1, 3, 3);

    Number credit! = WorkshopSettingCombo("Z. Credit", "Credit", 0, ["scort#11221", "Josbird (Cursor math)", "Please credit!"], 1000);
    credit = WorkshopSettingCombo("Z. Credit", "Import Codes", 0, ["BXRXY (NA/EU)", "5RKYY (JP)"], 1000);

    // heal amount
    if (S_HEAL_PERCENT != 20)
    {
        flatHeal = false;
        finalHeal = (S_HEAL_PERCENT + 1) * 0.05;
        healIncrement = 0.025;
    }
    else
    {
        flatHeal = true;
        finalHeal = Near(S_FLAT_HEAL_AMT / 5) * 5;
        healIncrement = 5;
    }

    // heal reward type (hok, pickups, none)
    if (S_HEAL_TYPE == HealType.None)
    {
        S_MODIFY_HEAL = false;
        S_DEF_HEAL = false;
    }

    // set healing to none if all heal related options are disabled
    if (!S_MODIFY_HEAL && !S_DEF_HEAL)
        S_HEAL_TYPE = HealType.None;

    // set lite mode
    if (S_LITE_MODE)
    {
        S_USE_OW_SCOREBORD = true;
        S_MENU = false;
        S_DEF_HUD = false;
        S_DEF_STREAK = false;
        S_DEF_STATS = false;
        S_AFK_ENABLED = false;
    }

    mapIsChateau = IsMap(Map.Chateau_Guillard) || IsMap(Map.Chateau_Guillard_Halloween);

    if (mapIsChateau && S_DESTROY_RAILINGS)
    {
        projLoc = [Vector(206.28, 13.00, 65.06),
                    Vector(175.60, 10.00, 79.51),
                    Vector(224.87, 10.78, 105.12),
                    Vector(219.70, 5.95, 73.67)];
    }

    DisableAnnouncer();
    SetMatchTime(1);

    Wait(2);
    EnableAnnouncer();
}

rule: "Initial Player Join"
Event.OnPlayerJoin
if (!IsDummyBot())
{
    if (!S_USE_OW_SCOREBORD)
        DisableGameModeHud();

    # invalidate sel_item and fav_item
    selItem = Item.Invalid;
    favItem = Item.Invalid;
    favItemPStr = "";

    # set healing properties
    healAmt = finalHeal;
    healDur = S_HOT_TIME;

    # invalidate orb index
    orbIn = -1;

    # set afk timer
    afkTime = S_AFK_KICK_TIME;

    # in debug list?
    isDbgUsr = dbgUsrs.Contains(<"<0>", player>);

    Wait(0.1);

    # set menu defaults
    showAllEnabled = S_DEF_STATS && S_DEF_STREAK;
    showStatsEnabled = S_DEF_STATS;
    showStreakEnabled = S_DEF_STREAK;
    healEnabled = S_DEF_HEAL;
    randomHeroEnabled = S_DEF_RANDOMHERO;
    randomizerType = S_DEF_RANDOMIZER_TYPE;

    // set language
    if (S_DEF_LANG == Lang.EN)
        LangID = Lang.EN;
    else if (S_DEF_LANG == Lang.JP)
        LangID = Lang.JP;
    else if (S_DEF_LANG == Lang.KR)
        LangID = Lang.KR;

    # set menu animation initial value
    if (S_USE_MENU_ANIM)
    {
        for (Number i = 0; i < ANIM_ITEM_Y_POS.Length; i++)
        {
            itemYPos[i] = 2.15;
            Wait(0.048);
        }

        menuInit = true;
    }
    else
    {
        for (Number i = 0; i < ANIM_ITEM_Y_POS.Length; i++)
        {
            itemYPos[i] = ANIM_ITEM_Y_POS[i];
            Wait(0.048);
        }

        menuInit = true;
    }

    WaitUntil(HasSpawned(), S_AFK_KICK_TIME);
    userJoinTime = Time();
}

rule: "Match : Match Started"
if (IsGameInProgress())
{
    if (!S_SCORE_TO_WIN)
    {
        DisableCompletion();
        DisableAnnouncer();
    }

    Wait(0.08);
    SetMatchTime(S_MATCH_TIME);
}

globalvar Number timeResets;
rule: "Match : Reset Match time if lobby becomes empty"
if (IsGameInProgress())
if (All().Length <= 1)
if (MatchTime() > 60)
if (timeResets < 3)
{
    SetMatchTime(S_MATCH_TIME);
    timeResets++;
}

rule: "Match : End Game"
if (!S_SCORE_TO_WIN)
if (MatchTime() <= 0)
{
    WaitIfTrue(1); // just in case something breaks and somehow puts lobbies into a restart loop
    EnableCompletion();
}

rule: "Spawning : Player Spawned"
Event.OngoingPlayer
if (HasSpawned())
{
    afk = false;
    Wait(1);
    WaitUntil(menuInit, 3);

    if (S_MENU)
        SmallMessage(player, <"   <0><1>", welcomeStr[local.LangID], StringReplace(holdToOpenMenuStr[local.LangID], "{interact}", BindString(Button.Interact))>);
}

rule: "Spawning : Respawn"
Event.OngoingPlayer
if (IsAlive())
if (HasSpawned())
{
    if (randomHeroEnabled)
    {
        if (!PlayerSwappedHero())
        {
            if (randomizerType == RandomizerType.Queue)
            {
                if (firstPoolRandomized)
                {
                    Hero chosenRandomHero = randomHeroPool.First;
                    ForcePlayerHero(player, chosenRandomHero);
                    randomHeroPool = randomHeroPool - chosenRandomHero;
                    StopForcingHero();

                    // "Spawning : Previous Hero" OnDeath rule checks if the randomHeroPool is empty then randomizes it again
                }
            }
            else
            {
                // remove the previous hero from the hero array to re add later to prevent getting the same hero multiple times in a row
                Hero[] heroArr! = AllowedHeroes() - heroOnLastDeath;

                ForcePlayerHero(player, heroArr.Random());
                StopForcingHero();

                // add the previous hero back to the hero array
                heroArr = AllowedHeroes() + heroOnLastDeath;
            }
        }
        else
        {
            StopForcingHero();
            randomHeroEnabled = false;
        }
    }

    if (PlayerSwappedHero())
    {
        // SetHeroStats();
        SetMaxHealth(player, 100);

        // Number currHeroIndex = IndexOfArrayValue(AllHeroes(), HeroOf());
        // Number storageIndex = IndexOfArrayValue(AllHeroes(), heroOnLastDeath);

        // MinWait();

        // for (Number i = 0; i < 6; i++)
        // {
        //     heroStatStorage[i][storageIndex] = heroStatVal[i];
        //     heroStatVal[i] = heroStatStorage[i][currHeroIndex];
        //     MinWait();
        // }
    }

    MinWait();

    ResetHeroAvailability();
    checkSpawn = true;

    Wait(0.08);

    checkSpawn = false;

    SetAbilityCooldown(player, Button.Ability1, 0);
    SetAbilityCooldown(player, Button.Ability2, 0);
    SetAbilityCooldown(player, Button.PrimaryFire, 0);
    SetAbilityCooldown(player, Button.SecondaryFire, 0);

    Wait(0.5);
    async CapSpawnHealth();
}

playervar Hero heroOnLastDeath;
rule: "Spawning : Previous Hero"
Event.OnDeath
if (PlayerSwappedHero())
{
    heroOnLastDeath = HeroOf();

    // probably better to just check on death instead of the main randomizer rule
    if (randomHeroEnabled && randomHeroPool.Length <= 1 && firstPoolRandomized)
        RandomizeHeroPool();

}

void CapSpawnHealth() playervar "Cap Spawn Health"
{
    if (S_HERO_HEALTH_CAP)
    {
        if (MaxHealth() > S_HERO_HEALTH_CAP_AMT)
            SetMaxHealth(player, (S_HERO_HEALTH_CAP_AMT / MaxHealth()) * 100);

        Wait(0.1);
        SetPlayerHealth(player, MaxHealth());
    }
}

rule: "Spawning : Remove Chateau Pier Spawn"
Event.OngoingPlayer
if (checkSpawn)
if (mapIsChateau)
if (HasSpawned())
if (DistanceBetween(PositionOf(), Vector(177, 0, 51.5)) < 1)
{
    checkSpawn = false;

    LogToInspector(<"<0> spawned at the pier, forcing respawn", player>);
    Respawn();
}

rule: "Spawning : Force Respawn Hotkey"
Event.OngoingPlayer
if (S_INSTANT_RESPAWN)
if (IsButtonHeld(player, Button.Interact))
if (IsDead())
{
    Respawn();
}

rule: "Streak : Update Killstreak"
Event.OnFinalBlow
if (S_STREAKS_ENABLED)
if (IsAlive(Attacker()))
if (Attacker() != Victim())
{
    killStreak++;

    if (killStreak >= 5)
        streak = true;
}

rule: "Streak : Player died, Reset Kills"
Event.OnDeath
if (S_STREAKS_ENABLED)
if (killStreak > 0)
{
    streak = false;

    if (killStreak >= 5 && killStreak > bestStreak)
    {
        bestStreak = killStreak;

        bestStreakHero = HeroIconString(HeroOf());

        if (bestStreak > bestStreakServer)
        {
            bestStreakServer = bestStreak;
            bestStreakServerUser = player;
            bestStreakServerHero = bestStreakHero;
            SmallMessage(showStreakEnabled ? player : null, "   " + StringReplace(killStreakServerBestStr[local.LangID], "{number}", killStreak));
            Wait(0.1);
            SmallMessage(FilteredArray(All().Remove(player), Curr().showStreakEnabled),
                <"   <0> <1>", bestStreakServerHero, DuoStringReplace(playerGotServerBestKillStreakStr[local.LangID], "{player}", "{number}", bestStreakServerUser, killStreak)>);
        }
        else
        {
            SmallMessage(showStreakEnabled ? player : null, <"   <0> <1>", bestStreakHero, StringReplace(killStreakPersonalBestStr[local.LangID], "{number}", killStreak)>);
        }
    }
    else if (killStreak >= 5)
    {
        SmallMessage(showStreakEnabled ? player : null, "   " + StringReplace(lastKillstreakStr[local.LangID], "{number}", killStreak));
    }

    Wait(0.1);
    killStreak = 0;
}

globalvar Boolean mapIsChateau;

rule: "Destroy Railings"
if (S_DESTROY_RAILINGS)
if (IsGameInProgress())
if (All().Length > 0) // if at least one person has loaded into the lobby
if (mapIsChateau)
{
    for (Number i = 0; i < projLoc.Length; i++)
    {
        CreateProjectile(
            ProjectileType: ProjectileType.OrbProjectile,
            Player: null,
            StartPosition: projLoc[i],
            Direction: Down(),
            Relative: Relative.ToWorld,
            ModifyHealthType: ModifyHealthType.Damage,
            AffectedTeam: Team.All,
            Amount: 0,
            AmountScalar: 99999,
            ExplosionRadius: 30, // explosion radius is capped to some internal arbitrary number (around 30?)
            ExplosionEffect: PlayEffect.BadExplosion,
            ExplosionSoundEffect: PlayEffect.ExplosionSound,
            Oversize: 0,
            Speed: 100,
            Lifetime: 2,
            Impulse: 0,
            RicochetCount: 0,
            Gravity: 0
        );
    }
}

rule: "Bounding Box"
Event.OngoingPlayer
if (mapIsChateau)
if (boundingBoxArr.Contains(HeroOf()))
if (PosOf().Y < 6)
if (IsInRange(PosOf().Z, 108.50, 116.50))
if (IsInRange(PosOf().X, 186.50, 199.50))
{
    if (IsInRange(PosOf().X, 198.60, 199.50))
        ApplyImpulse(player, Vector(1, 0, 0), 1);
    else if (IsInRange(PosOf().X, 186.50, 189.70))
        ApplyImpulse(player, Vector(-1, 0, 0), 1);
    else if (IsInRange(PosOf().Z, 112.70, 116.50))
        ApplyImpulse(player, Vector(0, 0, 1), 1);
    Wait(0.05);
    LoopIfConditionIsTrue();
}

playervar Boolean playerCCed;
rule: "Player cced" // this is so fucking ugly
Event.OngoingPlayer
if (HasStatus(player, Status.Asleep) ||
    HasStatus(player, Status.Frozen) ||
    HasStatus(player, Status.KnockedDown) ||
    HasStatus(player, Status.Rooted) ||
    HasStatus(player, Status.Stunned))
{
    playerCCed = true;

    WaitUntil(!HasStatus(player, Status.Asleep) &&
              !HasStatus(player, Status.Frozen) &&
              !HasStatus(player, Status.KnockedDown) &&
              !HasStatus(player, Status.Rooted) &&
              !HasStatus(player, Status.Stunned),
    5);

    playerCCed = false;
}

void RandomizeHeroPool() playervar "Randomize Hero Pool"
{
    if (!firstPoolRandomized)
        firstPoolRandomized = true;

    randomHeroPool = [];
    Hero[] allowedHeroes = AllowedHeroes() - HeroOf();
    Hero heroToAddToPool;
    for (Number i = allowedHeroes.Length - 1; i >= 1; i--)
    {
        heroToAddToPool = RandomValueInArray(allowedHeroes);
        randomHeroPool += heroToAddToPool;
        allowedHeroes = allowedHeroes - heroToAddToPool;
        MinWait();
    }

    // SmallMessage(player, randomHeroPool.Length);
}

// rule: "Stop OW Auto Heal DPS/Tank"
// Event.OngoingPlayer
// if (S_STOP_OW_AUTOHEAL)
// if (IsAlive())
// if (HasSpawned())
// if (!playerCCed)
// if (!AllSupportHeroes().Contains(HeroOf()))
// if (NormalizedHealth() != 1)
// {
//     Wait(4.99);
//     Damage(player, null, 0.000001);
//     Heal(player, null, 0.000001);
//     LoopIfConditionIsTrue();
// }

// rule: "Stop OW Auto Heal Support"
// Event.OngoingPlayer
// if (S_STOP_OW_AUTOHEAL)
// if (IsAlive())
// if (HasSpawned())
// if (!playerCCed)
// if (AllSupportHeroes().Contains(HeroOf()))
// if (NormalizedHealth() != 1)
// {
//     Wait(2.49);
//     Damage(player, null, 0.000001);
//     Heal(player, null, 0.000001);
//     LoopIfConditionIsTrue();
// }
