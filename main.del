import "settings/settings.del";
// import "settings/jpsettings.del";
// import "settings/debug_settings.del";

import "../macros-ostw/main.del";

import "afk.del";
import "healing/healmain.del";
import "healing/hok.del";
import "healing/healpickup.del";
import "hud.del";
import "debug.del";

import "menu/menu.del";

import "lang/lang_funcs.del";
import "lang/en.del";
import "lang/jp.del";
// import "lang/es.del";

import "hero specific/venture.del";

globalvar Hero[] critExcArr;
globalvar Hero[] scopeArr;
globalvar Hero[] scopeCritArr;
globalvar Hero[] boundingBoxArr;
globalvar Boolean S_LITE_MODE;

globalvar Number S_MATCH_TIME;
globalvar Boolean S_DESTROY_RAILINGS;

globalvar Boolean S_STREAKS_ENABLED;
globalvar Boolean S_USE_OW_SCOREBORD;

globalvar Number S_HEAL_TYPE;
globalvar Boolean S_MENU;
globalvar Boolean S_USE_MENU_ANIM;
globalvar Boolean S_DEF_HUD;
globalvar Boolean S_DEF_STATS;
globalvar Boolean S_DEF_STREAK;
globalvar Boolean S_DEF_HEAL;
globalvar Boolean S_DEF_RANDOMHERO;

globalvar Number S_MAX_HEAL_ORBS;
globalvar Number S_ORB_TIME;
globalvar Boolean S_ORB_COLLECTION_DESPAWN;
globalvar Number S_ORB_COLLECT_DIST;

globalvar Boolean S_AFK_ENABLED;
globalvar Number S_AFK_TIME;
globalvar Number S_AFK_KICK_TIME;

globalvar Boolean S_MODIFY_HUD;
globalvar Boolean S_MODIFY_HEAL;
globalvar Boolean S_MODIFY_RANDOMHERO;

globalvar Boolean S_DISABLE_HEALSTACK;
globalvar Number S_HOT_TIME;
globalvar Boolean S_HOT_INTERRUPT;
globalvar Number S_HOT_INTERRUPT_MIN_DMG;
globalvar Boolean S_INSTANT_RESPAWN;
globalvar Boolean S_SCORE_TO_WIN;
globalvar Number S_FLAT_HEAL_AMT;
globalvar Boolean S_HERO_HEALTH_CAP;
globalvar Number S_HERO_HEALTH_CAP_AMT;
globalvar Boolean flatHeal;
globalvar Number S_HEAL_PERCENT;
globalvar Number finalHeal; 
globalvar Number healIncrement;
globalvar Number S_LANG;

globalvar Vector[] projLoc;

globalvar Any[] dbgUsrs;
playervar Boolean isDbgUsr;

playervar Boolean checkSpawn;
playervar Boolean hasOpenedMenu;
playervar Boolean jumppadBugged; // check if the world jump pad is broken for whatever reason thanks blizzard fuck yourselves

rule: "v2.3.5.231010 | Created by scort#12211" 
{
    # OSTW source code can be found at https://github.com/scorttt/yatffa-ostw
    DisableInspectorRecording(); 
}

rule: "Initial Global"
{
    dbgUsrs = ["scort", "gigaballs"];

    critExcArr = [Hero.Ana, Hero.Pharah, Hero.Zarya, Hero.Reinhardt, Hero.Sigma, Hero.Winston, Hero.Junkrat, Hero.Symmetra, Hero.Brigitte, Hero.Moira, Hero.Venture]; // array of heroes that do NOT crit
    scopeArr = [Hero.Widowmaker, Hero.Ashe, Hero.Ana];
    scopeCritArr = [Hero.Widowmaker, Hero.Ashe];
    boundingBoxArr = [Hero.Pharah, Hero.Lucio]; // array of heroes that are affected by the bounding box below mega on chataeu

    S_LITE_MODE = WorkshopSettingToggle("!. YATFFA Lite", "Enable Lite Mode (Disables everything except for Healing, destroying railings, and instant respawns)", false, 0);

    S_LANG = WorkshopSettingCombo("A. General", "Language", 0, ["English", "日本語"], 0);
    S_MATCH_TIME = WorkshopSettingInteger("A. General", "Match Time (Minutes)", 30, 5, 60, 1) * 60;
    S_INSTANT_RESPAWN = WorkshopSettingToggle("A. General", "Respawn instantly on Interact", true, 2);
    S_SCORE_TO_WIN = WorkshopSettingToggle("A. General", "Enable Score Win Condition", true, 3);
    S_USE_OW_SCOREBORD = WorkshopSettingToggle("A. General", "Use Overwatch's Deathmatch Scoreboard", false, 4);
    S_DESTROY_RAILINGS = WorkshopSettingToggle("A. General", "Destroy Railings on Round Start (Chataeu Guillard Only)", true, 5);

    S_AFK_ENABLED = WorkshopSettingToggle("B. AFK", "Enable AFK", true, 0);
    S_AFK_TIME = WorkshopSettingReal("B. AFK", "Time to put players in AFK (Seconds)", 20, 5, 600, 1);
    S_AFK_KICK_TIME = WorkshopSettingReal("B. AFK", "Time to Kick AFK Players (Seconds)", 300, 10, 600, 2) - S_AFK_TIME;

    S_MENU = WorkshopSettingToggle("C. Menu", "Use Menu", true, 0);
    S_USE_MENU_ANIM = WorkshopSettingToggle("C. Menu", "Menu Animations", true, 1);

    S_STREAKS_ENABLED = WorkshopSettingToggle("D. HUD", "Enable Player Kill Streaks (On)", true, 0);
    S_MODIFY_HUD = WorkshopSettingToggle("D. HUD", "Allow Modifying Workshop HUD menu toggles", true, 1);
    S_DEF_HUD = WorkshopSettingToggle("D. HUD", "\"Show Workshop HUD\" default menu toggle", true, 2);
    S_DEF_STREAK = WorkshopSettingToggle("D. HUD", "\"Show Kill Streaks\" default menu toggle", true, 3);
    S_DEF_STATS = WorkshopSettingToggle("D. HUD", "\"Show Player Stats\" default menu toggle", true, 4);

    S_MODIFY_RANDOMHERO = WorkshopSettingToggle("E. Random Hero", "Allow Modifying \"Random Hero\" menu toggle", true, 0);
    S_DEF_RANDOMHERO = WorkshopSettingToggle("E. Random Hero", "\"Random Hero\" default menu toggle", false, 1);

    S_HEAL_TYPE = WorkshopSettingCombo("F. Healing", "Healing Type", 0, ["Heal On Kill", "Health Pickups", "Heal On Kill and Health Pickups", "None"], 0);
    S_MODIFY_HEAL = WorkshopSettingToggle("F. Healing", "Allow Modifying Healing menu settings", true, 1);
    S_DEF_HEAL = WorkshopSettingToggle("F. Healing", "\"Healing\" default menu toggle", true, 2);
    S_HEAL_PERCENT = WorkshopSettingCombo("F. Healing", "Heal Reward", 9, 
        ["5% of Victims Max HP", "10% of Victims Max HP", "15% of Victims Max HP",
         "20% of Victims Max HP", "25% of Victims Max HP", "30% of Victims Max HP", 
         "35% of Victims Max HP", "40% of Victims Max HP", "45% of Victims Max HP", 
         "50% of Victims Max HP", "55% of Victims Max HP", "60% of Victims Max HP", 
         "65% of Victims Max HP", "70% of Victims Max HP", "75% of Victims Max HP", 
         "80% of Victims Max HP", "85% of Victims Max HP", "90% of Victims Max HP", 
         "95% of Victims Max HP", "100% of Victims Max HP", "Use Flat Heal Rewards"], 3);

    S_FLAT_HEAL_AMT = WorkshopSettingInteger("F. Healing", "Flat Heal Amount (Only applicable if \"Use Flat Heal Rewards\" is set in Heal Reward)", 120, 1, 700, 4);
    S_HOT_TIME = Near(WorkshopSettingReal("F. Healing", "Healing Duration", 4.5, 0, 16, 5) * 2) / 2;
    S_DISABLE_HEALSTACK = WorkshopSettingToggle("F. Healing", "Disable Stacking Heal Rewards with Healing Abilities", true, 6);
    S_HOT_INTERRUPT = WorkshopSettingToggle("F. Healing", "Interrupt Healing upon damage taken", true, 7);
    S_HOT_INTERRUPT_MIN_DMG = WorkshopSettingReal("F. Healing", "Minimum Damage to Interrupt Healing", 1, 0, 200, 8);

    S_HERO_HEALTH_CAP = WorkshopSettingToggle("G. Health", "Cap Hero Health on Spawn (On)", true, 0);
    S_HERO_HEALTH_CAP_AMT = WorkshopSettingInteger("G. Health", "Maximum Hero Health (Only applicable if \"Cap Hero Health on Spawn\" is enabled)", 325, 150, 800, 1);

    S_ORB_TIME = WorkshopSettingInteger("H. Healing Pickups", "Pickup Lifetime", 8, 2, 30, 0);
    S_MAX_HEAL_ORBS = WorkshopSettingInteger("H. Healing Pickups", "Maximum amount of pickups per player (11+ may go over the 128 effect limit)", 10, 1, 20, 1);
    S_ORB_COLLECTION_DESPAWN = WorkshopSettingToggle("H. Healing Pickups", "All pickups disappear after collection", false, 2);
    S_ORB_COLLECT_DIST = WorkshopSettingReal("H. Healing Pickups", "Pickup Collection Distance", 1.5, 1, 3, 3);

    Number credit! = WorkshopSettingCombo("Z. Credit", "Credit", 0, ["scort#11221", "さるよ (JP Localization)", "Josbird (Cursor math)", "Please credit!"], 1000);
    credit = WorkshopSettingCombo("Z. Credit", "Import Codes", 0, ["BXRXY (NA/EU)", "5RKYY (JP)"], 1000);

    // heal amount
    if (S_HEAL_PERCENT != 20)
    {
        flatHeal = false;
        finalHeal = (S_HEAL_PERCENT + 1) * 0.05;
        healIncrement = 0.025;
    }
    else 
    {
        flatHeal = true;
        finalHeal = Near(S_FLAT_HEAL_AMT / 5) * 5;
        healIncrement = 5;
    }

    // heal reward type (hok, pickups, none)
    if (S_HEAL_TYPE == 3)
    {
        S_MODIFY_HEAL = false;
        S_DEF_HEAL = false;
    }

    // set healing to none if all heal related options are disabled
    if (!S_MODIFY_HEAL && !S_DEF_HEAL)
        S_HEAL_TYPE = 3;

    // set lite mode
    if (S_LITE_MODE)
    {
        S_USE_OW_SCOREBORD = true;
        S_MENU = false;
        S_DEF_HUD = false;
        S_DEF_STREAK = false;
        S_DEF_STATS = false;
        S_AFK_ENABLED = false;
    }

    if (IsMap(Map.Chateau_Guillard) || IsMap(Map.Chateau_Guillard_Halloween))
    {
        validMap = true;

        if (S_DESTROY_RAILINGS)
        {
            projLoc = [Vector(206.28, 13.00, 65.06),
                        Vector(175.60, 10.00, 79.51),
                        Vector(224.87, 10.78, 105.12),
                        Vector(219.70, 5.95, 73.67)];
        }
    }

    DisableAnnouncer();
    SetMatchTime(1);

    Wait(2);
    EnableAnnouncer();
}

rule: "Initial Player Join"
Event.OnPlayerJoin
if (!IsDummyBot())
{
    if (!S_USE_OW_SCOREBORD)
        DisableGameModeHud();

    # invalidate sel_item and fav_item
    selItem = Item.Invalid;
    favItem = Item.Invalid;
    favedItemStr = "";

    # set healing properties
    healAmt = finalHeal;
    healDur = S_HOT_TIME;

    # invalidate orb index
    if (S_HEAL_TYPE != 0)
        orbIn = -1;

    # set afk timer
    afkTime = S_AFK_KICK_TIME;

    # in debug list?
    isDbgUsr = dbgUsrs.Contains(<"<0>", player>);

    Wait(0.032);

    # set menu defaults
    showAllEnabled = S_DEF_STATS && S_DEF_STREAK;
    showStatsEnabled = S_DEF_STATS;
    showStreakEnabled = S_DEF_STREAK;
    healEnabled = S_DEF_HEAL;
    randomHeroEnabled = S_DEF_RANDOMHERO;

    // set language
    switch (S_LANG)
    {
        case (Lang.EN):
            SetEnglish();
            break;
        case (Lang.JP):
            SetJapanese(); 
            break;
        // case (Lang.KR):
        //     SetKorean();
        //     break;
        // case (Lang.MX):
        //     SetMXSpanish();
        //     break;
    }

    # set menu animation initial value
    if (S_USE_MENU_ANIM)
    {
        for (Number i = 0; i < ITEM_Y_POS.Length; i++)
        {
            itemYPos[i] = 2.15;
            Wait(0.048);
        }

        menuInit = true;
    }
    else 
    {
        for (Number i = 0; i < ITEM_Y_POS.Length; i++)
        {
            itemYPos[i] = ITEM_Y_POS[i];
            Wait(0.048);
        }

        menuInit = true;
    }
}

rule: "Match : Match Started"
if (IsGameInProgress())
{
    if (!S_SCORE_TO_WIN)
    {
        DisableCompletion();
        DisableAnnouncer();
    }

    Wait(0.08);
    SetMatchTime(S_MATCH_TIME);
}

globalvar Number timeResets;
rule: "Match : Reset Match time if lobby becomes empty"
if (IsGameInProgress())
if (All().Length == 0)
if (Time() > 10)
if (timeResets < 3)
{
    SetMatchTime(S_MATCH_TIME);

    WaitIfTrue(10);
    timeResets++;
}

rule: "Match : End Game"
if (!S_SCORE_TO_WIN)
if (MatchTime() <= 0)
{
    WaitIfTrue(1); // just in case something breaks and somehow puts lobbies into a restart loop
    EnableCompletion();
}

rule: "Spawning : Player Spawned"
Event.OngoingPlayer
if (HasSpawned())
{
    afk = false;
    Wait(1);
    WaitUntil(!langSwap, 1);

    if (S_MENU)
        SmallMessage(player, <"   <0><1>", local.welcomeStr, StringReplace(local.holdToOpenMenuStr, "{interact}", BindString(Button.Interact))>);
}

rule: "Spawning : Respawn"
Event.OngoingPlayer
if (IsAlive())
if (HasSpawned())
{
    if (!randomHeroEnabled)
    {
        switch (HeroOf())
        {
            case Hero.Tracer:
                SetAbilityCharge(player, Button.Ability1, 3);
                break;
            case Hero.Symmetra:
                SetAbilityCharge(player, Button.Ability1, 3);
                break;
            case Hero.Junkrat:
                SetAbilityCharge(player, Button.Ability1, 2);
                break;
            case Hero.Dva:
                SetAbilityResource(player, Button.SecondaryFire, 100);
                break;
            case Hero.Reinhardt:
                SetAbilityCharge(player, Button.Ability2, 2);
                break;
            case Hero.Pharah:
                SetAbilityResource(player, Button.Jump, 100);
                break;
        }
    }
    else
    {
        # remove the previous hero from the hero array to re add later to prevent getting the same hero multiple times in a row
        Hero[] heroArr! = AllowedHeroes() - prevHero;

        if (prevHero == HeroOf())
        {
            ForcePlayerHero(player, heroArr.Random());
            StopForcingHero();

            # add the previous hero back to the hero array
            heroArr = AllowedHeroes() + prevHero;
        }
        else 
        {
            StopForcingHero();
            randomHeroEnabled = false;
        }
    }

    if (prevHero != HeroOf())
    {
        SetHeroStats();
        SetMaxHealth(player, 100);
    }

    MinWait();

    ResetHeroAvailability();
    checkSpawn = true;

    Wait(0.08);

    checkSpawn = false;

    SetAbilityCooldown(player, Button.Ability1, 0);
    SetAbilityCooldown(player, Button.Ability2, 0);
    SetAbilityCooldown(player, Button.PrimaryFire, 0);
    SetAbilityCooldown(player, Button.SecondaryFire, 0);

    Wait(0.5);
    async CapSpawnHealth();
}

playervar Hero prevHero;
rule: "Spawning : Previous Hero"
Event.OnDeath
if (prevHero != HeroOf())
{
    prevHero = HeroOf();
}

void CapSpawnHealth() playervar "Cap Spawn Health"
{
    if (S_HERO_HEALTH_CAP)
    {
        if (MaxHealth() > S_HERO_HEALTH_CAP_AMT)
            SetMaxHealth(player, (S_HERO_HEALTH_CAP_AMT / MaxHealth()) * 100);

        Wait(0.1);
        SetPlayerHealth(player, MaxHealth());
    }
}

rule: "Spawning : Remove Chateau Pier Spawn"
Event.OngoingPlayer
if (checkSpawn)
if (validMap)
if (HasSpawned())
if (DistanceBetween(PositionOf(), Vector(177, 0, 51.5)) < 1)
{
    checkSpawn = false;

    LogToInspector(<"<0> spawned near the Chateau Pier spawn coords, forcing a respawn", player>);
    Respawn();
}

rule: "Spawning : Force Respawn Hotkey"
Event.OngoingPlayer
if (S_INSTANT_RESPAWN)
if (IsButtonHeld(player, Button.Interact))
if (IsDead())
{
    Respawn();
}

rule: "Streak : Update Killstreak"
Event.OnFinalBlow
if (S_STREAKS_ENABLED)
if (IsAlive(Attacker())) 
if (Attacker() != Victim())
{
    killStreak++;

    if (killStreak >= 5)
        streak = true;
}

rule: "Streak : Player died, Reset Kills"
Event.OnDeath
if (S_STREAKS_ENABLED)
if (killStreak > 0)
{
    streak = false;

    if (killStreak >= 5 && killStreak > bestStreak)
    {
        bestStreak = killStreak;

        bestStreakHero = HeroIconString(HeroOf());

        if (bestStreak > bestStreakServer)
        {
            bestStreakServer = bestStreak;
            bestStreakServerUser = player;
            bestStreakServerHero = bestStreakHero;
            SmallMessage(showStreakEnabled ? player : null, "   " + StringReplace(local.killStreakServerBestStr, "{number}", killStreak));
            Wait(0.1);
            SmallMessage(FilteredArray(All().Remove(player), Curr().showStreakEnabled), 
            <"   <0> <1>", bestStreakServerHero, DuoStringReplace(local.playerGotServerBestKillStreakStr, "{player}", "{number}", bestStreakServerUser, killStreak)>);
        }
        else 
        {
            SmallMessage(showStreakEnabled ? player : null, "   " + <"<0> <1>", bestStreakHero, StringReplace(local.killStreakPersonalBestStr, "{number}", killStreak)>);
        }
    }
    else if (killStreak >= 5)
    {
        SmallMessage(showStreakEnabled ? player : null, "   " + StringReplace(local.lastKillstreakStr, "{number}", killStreak));
    }

    Wait(0.1);
    killStreak = 0;
}

globalvar Boolean validMap;

rule: "Destroy Railings"
if (S_DESTROY_RAILINGS)
if (IsGameInProgress())
if (All().Length > 0) // if at least one person has loaded into the lobby
if (validMap)
{
    for (Number i = 0; i < projLoc.Length; i++)
    {
        CreateProjectile(
            ProjectileType: ProjectileType.OrbProjectile, 
            Player: null, 
            StartPosition: projLoc[i], 
            Direction: Down(), 
            Relative: Relative.ToWorld, 
            ModifyHealthType: ModifyHealthType.Damage, 
            AffectedTeam: Team.All, 
            Amount: 0, 
            AmountScalar: 99999, 
            ExplosionRadius: 30, // explosion radius is capped to some internal arbitrary number (around 30?)
            ExplosionEffect: PlayEffect.BadExplosion, 
            ExplosionSoundEffect: PlayEffect.ExplosionSound, 
            Oversize: 0, 
            Speed: 100, 
            Lifetime: 2, 
            Impulse: 0,
            RicochetCount: 0,
            Gravity: 0
        );
    }
}

rule: "Bounding Box"
Event.OngoingPlayer
if (validMap)
if (boundingBoxArr.Contains(HeroOf()))
if (PosOf().Y < 6)
if (IsInRange(PosOf().Z, 108.50, 116.50))
if (IsInRange(PosOf().X, 187.22, 199.50))
{
    if (IsInRange(PosOf().X, 198.60, 199.50))
        ApplyImpulse(player, Vector(1, 0, 0), 1);
    else if (IsInRange(PosOf().X, 187.00, 188.10))
        ApplyImpulse(player, Vector(-1, 0, 0), 1);
    else if (IsInRange(PosOf().Z, 112.70, 116.50))
        ApplyImpulse(player, Vector(0, 0, 1), 1);
    Wait(0.05);
    LoopIfConditionIsTrue();
}

rule: "Overwatch Jump pad Bug Failsafe"
Event.OngoingPlayer
if (validMap)
if (HasSpawned())
if (IsOnGround())
if ((DistanceBetween(PosOf(), Vector(192.50, 3.22, 51.99)) < 1.5) || (DistanceBetween(PosOf(), Vector(220.93, 5.29, 112.02)) < 1.5))
{
    // todo: remove this when blizzard gets their shit together and actually hires a QA team
    # workaround for an overwatch bug that breaks jump pads after swapping heroes
    if (!jumppadBugged)
    {
        WaitIfTrue(0.5);
        jumppadBugged = true;
        LogToInspector($"{player}'s jumppads are bugged");
    }

    PlayEffect(All(), PlayEffect.RingExplosionSound, Color.White, player, 40);
    PlayEffect(All(), PlayEffect.ExplosionSound, Color.White, player, 40);
    ApplyImpulse(player, Up(), 25.25);
}
